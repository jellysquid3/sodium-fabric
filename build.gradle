import net.fabricmc.loom.task.RemapJarTask
import net.fabricmc.loom.task.RemapSourcesJarTask

plugins {
    id 'fabric-loom' version '0.7-SNAPSHOT'
    id 'org.ajoberstar.grgit' version '4.1.0'
    id 'maven-publish'
}

archivesBaseName = "${project.archives_base_name}-mc${project.minecraft_version}"
version = "${project.mod_version}+${getVersionMetadata()}"
group = project.maven_group

minecraft {
    refmapName = "mixins.sodium.refmap.json"
    accessWidener = file("src/main/resources/sodium.accesswidener")
}

sourceSets {
    api {
        java {
            compileClasspath += main.compileClasspath
        }
    }

    main {
        java {
            compileClasspath += api.output
            runtimeClasspath += api.output
        }
    }
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
}

if (project.use_third_party_mods) {
    repositories {
        maven { url = "https://jitpack.io" }
    }

    dependencies {
        // DataBreaker applies a number of patches to eliminate the loading of data fixers
        // This greatly reduces the amount of time needed to start the game, but is generally unsafe in production
        modRuntime ("com.github.SuperCoder7979:databreaker:${project.databreaker_version}") {
            transitive = false
        }
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

java {
    withSourcesJar()

    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

tasks.withType(Jar) {
    from "LICENSE.txt"
}

jar {
    from(sourceSets.api.output) {
        exclude "fabric.mod.json" // dummy json so loom knows to remap the api jar, the real jar has a proper one
    }
}

tasks.register("apiJar", Jar) {
    classifier "api-dev"
    from sourceSets.api.output
}

def remapApiJar = tasks.register("remapApiJar", RemapJarTask) {
    classifier "api"
    input = apiJar.archiveFile
    addNestedDependencies = false
}
build.dependsOn remapApiJar

tasks.register("apiSourcesJar", Jar) {
    classifier "api-sources-dev"
    from sourceSets.api.allSource
}

def remapApiSourcesJar = tasks.register("remapApiSourcesJar", RemapSourcesJarTask) {
    dependsOn apiSourcesJar
    input = apiSourcesJar.archiveFile
    output = apiSourcesJar.destinationDirectory.file(apiSourcesJar.archiveFileName.map { it.replace("-dev", "") })
}
build.dependsOn remapApiSourcesJar

publishing {
    publications {
        main (MavenPublication) {
            artifactId "sodium"
            artifact(remapJar)
        }

        api (MavenPublication) {
            artifactId "sodium-api"
            artifact source: remapApiJar, classifier: ""
            artifact source: remapApiSourcesJar.map { it.output }, classifier: "sources"
        }
    }
}

def getVersionMetadata() {
    def build_id = System.getenv("GITHUB_RUN_NUMBER")

    // CI builds only
    if (build_id != null) {
        return "build.${build_id}"
    }

    if (grgit != null) {
        def head = grgit.head()
        def id = head.abbreviatedId

        // Flag the build if the build tree is not clean
        if (!grgit.status().clean) {
            id += "-dirty"
        }

        return "rev.${id}"
    }

    // No tracking information could be found about the build
    return "unknown"
}
